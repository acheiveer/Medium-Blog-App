// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())
  email String @unique
  password String
  name String?
  role  Role @default(VIEWER) // Role-based access
  posts Post[]         // User's own posts
  comments Comment[]  // Each user can have multiple comments
  likes    Like[]     // Each user can like multiple posts
  votes    Vote[]    // A user can vote on multiple comments
  collaborators BlogCollaborator[] // Collaborations with posts
}

enum Role {
  EDITOR
  VIEWER
}

model Post{
  id String @id @default(uuid())
  title String
  content String
  published Boolean @default(false)
  author User @relation(fields: [authorId],references: [id])
  authorId String
  comments  Comment[] // A post can have multiple comments
  likes     Like[]    // A post can have multiple likes
  collaborators BlogCollaborator[] // Collaborators on the post
}

model BlogCollaborator {
  id        String   @id @default(uuid())
  role      CollaboratorRole
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
}

enum CollaboratorRole {
  OWNER
  EDITOR
  VIEWER
}


model Comment {
  id        String    @id @default(uuid())
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  post      Post      @relation(fields: [postId], references: [id])
  postId    String
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String
  votes     Vote[]    // A comment can have multiple upvotes/downvotes
}

model Like {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model Vote {
  id        String   @id @default(uuid())
  type      VoteType
  createdAt DateTime @default(now())
  comment   Comment  @relation(fields: [commentId], references: [id])
  commentId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

// Enum for upvote/downvote
enum VoteType {
  UPVOTE
  DOWNVOTE
}



